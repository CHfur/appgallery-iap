<?php

namespace CHfur\AppGallery\ServerNotifications;

use CHfur\AppGallery\ValueObjects\Time;
use Huawei\IAP\Response\SubscriptionResponse;

class SubscriptionNotification
{
    public const NOTIFICATION_TYPES = [
        0 => 'INITIAL_BUY',
        1 => 'CANCEL',
        2 => 'RENEWAL',
        3 => 'INTERACTIVE_RENEWAL',
        4 => 'NEW_RENEWAL_PREF',
        5 => 'RENEWAL_STOPPED',
        6 => 'RENEWAL_RESTORED',
        7 => 'RENEWAL_RECURRING',
        9 => 'ON_HOLD',
        10 => 'PAUSED',
        11 => 'PAUSE_PLAN_CHANGED',
        12 => 'PRICE_CHANGE_CONFIRMED',
        13 => 'DEFERRED',
    ];

    /**
     * @var SubscriptionResponse
     */
    protected $subscriptionResponse;

    /**
     * Environment for sending a notification. The options are as follows:
     * PROD: official environment
     * Sandbox: sandbox testing environment
     * @var string
     */
    protected $environment;

    /**
     * Type of notification event.
     * @var int
     */
    protected $notificationType;

    /**
     * Subscription ID.
     * @var string
     */
    protected $subscriptionId;


    /**
     * Refund time. The value is a UTC timestamp, in milliseconds. This parameter is passed only when notificationType is set to CANCEL.
     * @var Time|null
     */
    protected $cancellationDate;

    /**
     * Order ID, which uniquely identifies a receipt that waits to be paid.
     * The order ID is generated by the Huawei IAP server when creating an order for a consumable or non-consumable or when renewing a subscription.
     * Each receipt matches a unique order ID. The parameter does not exist when notificationType is set to NEW_RENEWAL_PREF.
     * @var string|null
     */
    protected $orderId;

    /**
     * Token of the latest receipt, which is passed only when notificationType is set to INITIAL_BUY(0), RENEWAL(2),
     * or INTERACTIVE_RENEWAL(3) and the renewal is successful.
     * @var string|null
     */
    protected $latestReceipt;

    /**
     * Latest expired receipt, which is a JSON string.
     * This parameter has a value only when notificationType is set to RENEWAL(2) or INTERACTIVE_RENEWAL(3).
     * @var string|null
     */
    protected $latestExpiredReceipt;

    /**
     * Renewal status. The options are as follows:
     * 1: The subscription will automatically renew at the end of the current subscription period.
     * 0: The user has canceled subscription renewal.
     * @var int
     */
    protected $autoRenewStatus;

    /**
     * Refund order ID. This parameter has a value only when notificationType is set to CANCEL(1).
     * @var string|null
     */
    protected $refundPayOrderId;

    /**
     * Product ID.
     * @var string
     */
    protected $productId;

    /**
     * App ID.
     * @var string
     */
    protected $applicationId;

    /**
     * Expiration reason.
     * This parameter has a value only when notificationType is set to RENEWAL or INTERACTIVE_RENEWAL and the renewal fails.
     * @var int
     */
    protected $expirationIntent;

    public function __construct($statusUpdateNotification)
    {
        $this->subscriptionResponse = new SubscriptionResponse(['inappPurchaseData' => $statusUpdateNotification->latestReceiptInfo]);
        $this->environment = $statusUpdateNotification->environment;
        $this->notificationType = $statusUpdateNotification->notificationType;
        $this->subscriptionId = $statusUpdateNotification->subscriptionId;
        $this->cancellationDate = $statusUpdateNotification->cancellationDate ?? null;
        $this->latestReceipt = $statusUpdateNotification->latestReceipt ?? null;
        $this->latestExpiredReceipt = $statusUpdateNotification->latestExpiredReceipt ?? null;
        $this->autoRenewStatus = $statusUpdateNotification->autoRenewStatus;
        $this->refundPayOrderId = $statusUpdateNotification->refundPayOrderId ?? null;
        $this->productId = $statusUpdateNotification->productId;
        $this->applicationId = $statusUpdateNotification->applicationId ?? null;
        $this->expirationIntent = $statusUpdateNotification->expirationIntent ?? null;
    }

    /**
     * @return string
     */
    public function getEnvironment(): string
    {
        return $this->environment;
    }

    /**
     * @return bool
     */
    public function isSandbox(): bool
    {
        return $this->environment == 'Sandbox';
    }

    /**
     * @return int
     */
    public function getNotificationType(): int
    {
        return $this->notificationType;
    }

    /**
     * @return string
     */
    public function getNotificationTypeName(): string
    {
        return self::NOTIFICATION_TYPES[$this->notificationType];
    }

    /**
     * @return SubscriptionResponse
     */
    public function getSubscriptionResponse(): SubscriptionResponse
    {
        return $this->subscriptionResponse;
    }

    /**
     * @return string
     */
    public function getSubscriptionId(): string
    {
        return $this->subscriptionId;
    }

    /**
     * @return Time|null
     */
    public function getCancellationDate(): ?Time
    {
        return $this->cancellationDate;
    }

    /**
     * @return string|null
     */
    public function getOrderId(): ?string
    {
        return $this->orderId;
    }

    /**
     * @return string|null
     */
    public function getLatestReceipt(): ?string
    {
        return $this->latestReceipt;
    }

    /**
     * @return string|null
     */
    public function getLatestExpiredReceipt(): ?string
    {
        return $this->latestExpiredReceipt;
    }

    /**
     * @return int
     */
    public function getAutoRenewStatus(): int
    {
        return $this->autoRenewStatus;
    }

    /**
     * @return string|null
     */
    public function getRefundPayOrderId(): ?string
    {
        return $this->refundPayOrderId;
    }

    /**
     * @return string
     */
    public function getProductId(): string
    {
        return $this->productId;
    }

    /**
     * @return string|null
     */
    public function getApplicationId(): ?string
    {
        return $this->applicationId;
    }

    /**
     * @return int|null
     */
    public function getExpirationIntent(): ?int
    {
        return $this->expirationIntent;
    }
}